---
import { ArrowUpRightIcon, MoonIcon, SunIcon } from "@heroicons/react/24/solid";
import { Button } from "@/components/preact/styled/button";

const githubRepo = "https://github.com/konj-org/ui";
---

<footer 
  class={[
    "px-8",
    "md:px-0",
    "w-full",
    "max-w-none",
    "pt-8",
		"pb-[calc(theme(space.20)_+_env(safe-area-inset-bottom))]",
		"md:pb-8",
    "border-t",
    "border-t-neutral-200",
    "dark:border-neutral-800",
    "prose",
    "dark:prose-invert",
    "shadow-[0_0_1rem_theme(colors.neutral.300/05)]",
    "dark:shadow-none",
  ].join(" ")}
>
  <div class="max-w-5xl mx-auto flex items-center gap-4 justify-between">
    <p class="my-0 text-sm">
      Licensed under <a target="_blank" rel="noreferrer" href={githubRepo + "#license"}>MIT</a> License.
    </p>
    <Button className="ml-auto" square id="color-scheme-toggle">
      <SunIcon className="w-4 h-4 hidden dark:block" />
      <MoonIcon className="w-4 h-4 dark:hidden" />
    </Button>
  </div>
	<div class="max-w-5xl mx-auto">
		<p class="font-semibold mb-1">Links</p>
		<ul class="text-sm opacity-75 mt-1">
			<li>
				<a class="flex gap-1 items-center" target="_blank" rel="noreferrer" href={githubRepo}>
					<span>
						Github Repo
					</span>
					<ArrowUpRightIcon className="w-3 h-3" />
				</a>
			</li>
			<li>
				<a class="flex gap-1 items-center" href="/">
					<span>
						Home Page
					</span>
					<ArrowUpRightIcon className="w-3 h-3" />
				</a>
			</li>
		</ul>
	</div>
</footer>

<script>
	// Elements
	/** Returns the 'color-scheme-toggle' button. */
	const getCST = () => document.getElementById("color-scheme-toggle");
	
	// Types
	type ColorScheme = "dark" | "light";
	
	// Constants
	const headerKey = "data-color-scheme";
	const localStorageKey = "konj-ui-color-scheme";
	const possibleColorSchemes: ColorScheme[] = [ "dark", "light" ];
	
	/** Hydrates the stored color scheme in local storage */
	const hydrateColorScheme = () => {
		const storedColorScheme = localStorage.getItem(localStorageKey) as null | "dark" | "light";

		if ( possibleColorSchemes.includes(storedColorScheme as ColorScheme) ) {
			setColorScheme(storedColorScheme!);
		} else {
			localStorage.removeItem(localStorageKey);
		}
	}

	/** Sets the selected color scheme */
	const setColorScheme = (selectedColorScheme?: ColorScheme) => {
		const currentTheme = document.documentElement.getAttribute(headerKey) as ColorScheme;

		// Finding the new ColorScheme
		const colorScheme = selectedColorScheme ? selectedColorScheme! : currentTheme === "dark" ? "light" : "dark";

		// Setting the value
		document.documentElement.setAttribute(headerKey, colorScheme);
		localStorage.setItem(localStorageKey, colorScheme);
	}

	const afterSwap = () => {
		/** Settings color scheme */
		hydrateColorScheme();
		getCST()?.addEventListener("click", setColorScheme.bind(null, undefined));
	}

	document.addEventListener("astro:after-swap", afterSwap);
	getCST()?.addEventListener("click", setColorScheme.bind(null, undefined));

	hydrateColorScheme();
</script>